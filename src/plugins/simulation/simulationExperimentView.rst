.. _plugins_simulation_simulationExperimentView:

=================================
 SimulationExperimentView plugin
=================================

The SimulationExperimentView plugin can be used to run `CellML <https://www.cellml.org/>`__ and `SED-ML <http://www.sed-ml.org/>`__ files, as well as `COMBINE <http://co.mbine.org/>`__ archives.
However, OpenCOR only supports a subset of `SED-ML <http://www.sed-ml.org/>`__, so only `SED-ML <http://www.sed-ml.org/>`__ files and `COMBINE <http://co.mbine.org/>`__ archives generated by OpenCOR are guaranteed to work.

A `CellML <https://www.cellml.org/>`__ file describes either a system of `ordinary differential equations <https://en.wikipedia.org/wiki/Ordinary_differential_equation>`__ (ODEs) or `differential algebraic equations <https://en.wikipedia.org/wiki/Differential_algebraic_equation>`__ (DAEs).

Open a CellML file
------------------

Upon opening a `CellML <https://www.cellml.org/>`__ file, OpenCOR checks that it can be used for simulation.
If it cannot, then a message describing the issue is shown:

.. image:: pics/SimulationExperimentViewScreenshot01.png
   :align: center
   :scale: 25%

On the other hand, if you open a valid `CellML <https://www.cellml.org/>`__ file (e.g. ``models/noble_model_1962.cellml``, which is shipped with OpenCOR), then the view will look something like:

.. image:: pics/SimulationExperimentViewScreenshot02.png
   :align: center
   :scale: 25%

It consists of two main parts, the first of which allows you to customise the simulation, the solver(s) and the model parameters, as well as to specify which graphs to plot.
The second part is used to plot the requested graphs.
In the ``Parameters`` section, all the model parameters have an icon associated with them to highlight their type:

| |iconVoi|              Variable of integration
| |iconConstant|         (Editable) constant
| |iconComputedConstant| Computed constant
| |iconState|            (Editable) state
| |iconRate|             Rate
| |iconAlgebraic|        Algebraic

.. |iconVoi| image:: pics/voi.png
   :class: icon
   :width: 16px

.. |iconConstant| image:: pics/constant.png
   :class: icon
   :width: 16px

.. |iconComputedConstant| image:: pics/computedConstant.png
   :class: icon
   :width: 16px

.. |iconState| image:: pics/state.png
   :class: icon
   :width: 16px

.. |iconRate| image:: pics/rate.png
   :class: icon
   :width: 16px

.. |iconAlgebraic| image:: pics/algebraic.png
   :class: icon
   :width: 16px

Run an ODE model
----------------

To run a model, you need to provide some information about the simulation itself, i.e. its starting point, ending point and point interval.
Then, you need to specify the solver(s) that you want to use.
The solvers available to you depend on which :ref:`solver plugins <plugins_solver>` you selected, as well as on the type of your model (i.e. `ODE <https://en.wikipedia.org/wiki/Ordinary_differential_equation>`__ or `DAE <https://en.wikipedia.org/wiki/Differential_algebraic_equation>`__).
If you are dealing with an ODE model and all the solver plugins are selected, then `CVODE <http://computation.llnl.gov/projects/sundials/cvode>`__, forward `Euler <https://en.wikipedia.org/wiki/Euler_method>`__, `Heun <https://en.wikipedia.org/wiki/Heun's_method>`__, and second-order and fourth-order `Runge-Kutta <https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods>`__ will be available to you:

.. image:: pics/SimulationExperimentViewScreenshot03.png
   :align: center
   :scale: 25%

Each solver comes with its own set of properties, which can be customised.
For example, if you select ``Euler (forward)``, you will see that it has only one property (``Step``):

.. image:: pics/SimulationExperimentViewScreenshot04.png
   :align: center
   :scale: 25%

You can start the simulation by pressing ``F9`` or by clicking on the |oxygenActionsMediaPlaybackStart| button.
Then, or before, you can add a graph.
All the model parameters are listed to the bottom-left of the view, grouped by components in which they were originally defined.
To add a graph, right click on a model parameter and select against which other model parameter you want it to be plotted.
For example, to create a graph for ``V`` (from the ``membrane`` component) against the variable of integration (i.e. time since the simulation properties are expressed in milliseconds):

.. |oxygenActionsMediaPlaybackStart| image:: ../../pics/oxygen/actions/media-playback-start.png
   :class: inlineicon
   :width: 16px

.. image:: pics/SimulationExperimentViewScreenshot05.png
   :align: center
   :scale: 25%

You can get the information associated with a graph by double clicking on it:

.. image:: pics/SimulationExperimentViewScreenshot06.png
   :align: center
   :scale: 25%

The ``Model`` property is used to associate the graph with a particular file.
By default, it has a value of ``Current``, which means that the graph is associated with the current file.
You can, however, explicitly associate it with another one.
The |oxygenStatusTaskAttention| icon will be shown next to the check box, if the association cannot be done, and next to the ``X`` and/or ``Y`` properties to highlight which model parameter(s) could not be found in the other file.
The |oxygenStatusObjectUnlocked| icon indicates that the graph is not locked, i.e. its ``Model`` property has a value of ``Current``, while the |oxygenStatusObjectLocked| icon is used when a graph is associated with a specific file (resulting in a red trace rather than a blue one).
The ``X`` and ``Y`` properties can be modified either by editing their value or by right clicking on them and selecting another model parameter from the context menu, which can also be used to add or remove a graph.

.. |oxygenStatusTaskAttention| image:: ../../pics/oxygen/status/task-attention.png
   :class: inlineicon
   :width: 16px

.. |oxygenStatusObjectUnlocked| image:: ../../pics/oxygen/status/object-unlocked.png
   :class: inlineicon
   :width: 16px

.. |oxygenStatusObjectLocked| image:: ../../pics/oxygen/status/object-locked.png
   :class: inlineicon
   :width: 16px

Back to the simulation, you can see that it failed with several model parameters having a value of ``nan`` (i.e. `not a number <https://en.wikipedia.org/wiki/NaN>`__).
This is because the solver is not properly set up: its ``Step`` property is too big.
If you set it to ``0.01 milliseconds``, reset all the model parameters (by clicking on the |oxygenActionsViewRefresh| button), clear the simulation data (by clicking on the |oxygenActionsTrashEmpty| button) and restart the simulation, then you will get something like:

.. |oxygenActionsViewRefresh| image:: ../../pics/oxygen/actions/view-refresh.png
   :class: inlineicon
   :width: 16px

.. |oxygenActionsTrashEmpty| image:: ../../pics/oxygen/actions/trash-empty.png
   :class: inlineicon
   :width: 16px

.. image:: pics/SimulationExperimentViewScreenshot07.png
   :align: center
   :scale: 25%

Roughly the same trace can be obtained using the ``CVODE`` solver:

.. image:: pics/SimulationExperimentViewScreenshot08.png
   :align: center
   :scale: 25%

However, the simulation is so quick to run that you will most probably not have had time to see its progress.
Between the |oxygenActionsTrashEmpty| and |oxygenActionsRunBuildConfigure| buttons, there is a wheel that you can use to add a short delay between the plotting of two data points.
Thus, by using a value of ``100,000`` (or a bigger/smaller value, depending on the speed of your computer), you can run the simulation and pause it at a point of interest:

.. |oxygenActionsRunBuildConfigure| image:: ../../pics/oxygen/actions/run-build-configure.png
   :class: inlineicon
   :width: 16px

.. image:: pics/SimulationExperimentViewScreenshot09.png
   :align: center
   :scale: 25%

Now, you can modify any of the model parameters identified by either the |state| or |constant| icon (i.e. a state or a constant).
Say that you want to set ``g_Na_max`` (from the ``sodium_channel`` component) to ``0 milliS_per_cm2``.
To resume the simulation will then give you something like:

.. |state| image:: pics/state.png
   :class: inlineicon
   :width: 16px

.. |constant| image:: pics/constant.png
   :class: inlineicon
   :width: 16px

.. image:: pics/SimulationExperimentViewScreenshot10.png
   :align: center
   :scale: 25%
