.. _plugins_simulation_simulationExperimentView:

=================================
 SimulationExperimentView plugin
=================================

The SimulationExperimentView plugin can be used to run `CellML <https://www.cellml.org/>`__ and `SED-ML <http://www.sed-ml.org/>`__ files, as well as `COMBINE <http://co.mbine.org/>`__ archives.
However, OpenCOR only supports a subset of `SED-ML <http://www.sed-ml.org/>`__, so only `SED-ML <http://www.sed-ml.org/>`__ files and `COMBINE <http://co.mbine.org/>`__ archives generated by OpenCOR are guaranteed to work.

A `CellML <https://www.cellml.org/>`__ file describes either a system of `ordinary differential equations <https://en.wikipedia.org/wiki/Ordinary_differential_equation>`__ (ODEs) or `differential algebraic equations <https://en.wikipedia.org/wiki/Differential_algebraic_equation>`__ (DAEs).

Open a CellML file
------------------

Upon opening a `CellML <https://www.cellml.org/>`__ file, OpenCOR checks that it can be used for simulation.
If it cannot, then a message describing the issue is shown:

.. image:: pics/SimulationExperimentViewScreenshot01.png
   :align: center
   :scale: 25%

On the other hand, if you open a valid `CellML <https://www.cellml.org/>`__ file (e.g. ``models/noble_model_1962.cellml``, which is shipped with OpenCOR), then the view will look something like:

.. image:: pics/SimulationExperimentViewScreenshot02.png
   :align: center
   :scale: 25%

It consists of two main parts, the first of which allows you to customise the simulation, the solver(s) and the model parameters, as well as to specify which graphs to plot.
The second part is used to plot the requested graphs.
In the ``Parameters`` section, all the model parameters have an icon associated with them to highlight their type:

| |iconVoi|              Variable of integration
| |iconConstant|         (Editable) constant
| |iconComputedConstant| Computed constant
| |iconState|            (Editable) state
| |iconRate|             Rate
| |iconAlgebraic|        Algebraic

.. |iconVoi| image:: pics/voi.png
   :class: icon
   :width: 16px

.. |iconConstant| image:: pics/constant.png
   :class: icon
   :width: 16px

.. |iconComputedConstant| image:: pics/computedConstant.png
   :class: icon
   :width: 16px

.. |iconState| image:: pics/state.png
   :class: icon
   :width: 16px

.. |iconRate| image:: pics/rate.png
   :class: icon
   :width: 16px

.. |iconAlgebraic| image:: pics/algebraic.png
   :class: icon
   :width: 16px

Run an ODE model
----------------

To run a model, you need to provide some information about the simulation itself, i.e. its starting point, ending point and point interval.
Then, you need to specify the solver(s) that you want to use.
The solvers available to you depend on which :ref:`solver plugins <plugins_solver>` you selected, as well as on the type of your model (i.e. `ODE <https://en.wikipedia.org/wiki/Ordinary_differential_equation>`__ or `DAE <https://en.wikipedia.org/wiki/Differential_algebraic_equation>`__).
If you are dealing with an ODE model and all the solver plugins are selected, then `CVODE <http://computation.llnl.gov/projects/sundials/cvode>`__, forward `Euler <https://en.wikipedia.org/wiki/Euler_method>`__, `Heun <https://en.wikipedia.org/wiki/Heun's_method>`__, and second-order and fourth-order `Runge-Kutta <https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods>`__ will be available to you:

.. image:: pics/SimulationExperimentViewScreenshot03.png
   :align: center
   :scale: 25%

Each solver comes with its own set of properties, which can be customised.
For example, if you select ``Euler (forward)``, you will see that it has only one property (``Step``):

.. image:: pics/SimulationExperimentViewScreenshot04.png
   :align: center
   :scale: 25%

You can start the simulation by pressing ``F9`` or by clicking on the |oxygenActionsMediaPlaybackStart| button.
Then, or before, you can add a graph.
All the model parameters are listed to the bottom-left of the view, grouped by components in which they were originally defined.
To add a graph, right click on a model parameter and select against which other model parameter you want it to be plotted.
For example, to create a graph for ``V`` (from the ``membrane`` component) against the variable of integration (i.e. time since the simulation properties are expressed in milliseconds):

.. |oxygenActionsMediaPlaybackStart| image:: ../../pics/oxygen/actions/media-playback-start.png
   :class: inlineicon
   :width: 16px

.. image:: pics/SimulationExperimentViewScreenshot05.png
   :align: center
   :scale: 25%
